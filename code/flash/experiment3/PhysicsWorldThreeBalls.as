// TO DO LIST; // check how to apply noise in the actual world package{	import Box2D.Collision.Shapes.b2CircleShape;	import Box2D.Collision.Shapes.b2PolygonShape;	import Box2D.Collision.Shapes.b2Shape;	import Box2D.Common.*;	import Box2D.Common.Math.*;	import Box2D.Dynamics.*;	import Box2D.Dynamics.Contacts.*;	import Box2D.Dynamics.Joints.*;	import Box2D.Dynamics.b2Body;	import Box2D.Dynamics.b2BodyDef;	import Box2D.Dynamics.b2ContactListener;	import Box2D.Dynamics.b2DebugDraw;	import Box2D.Dynamics.b2Fixture;	import Box2D.Dynamics.b2FixtureDef;	import Box2D.Dynamics.b2World;		import flash.display.InteractiveObject;	import flash.display.MovieClip;	import flash.display.Sprite;	import flash.events.Event;	import flash.net.*;	import flash.utils.getTimer;	public class PhysicsWorldThreeBalls extends Sprite	{		public function PhysicsWorldThreeBalls(flashPattern:uint, aball_int:int, bball_int:int, eball_int:int, stopClip:Number, angularNoise:Number, velocityNoise:Number, ffRate:Number, fixedNoise_bol:Boolean, simulation_bol:Boolean, counterbalance_int:int) 		{					 									//variables needed for simulation			var run:int = 1;			var maxRun:int = 2;			var counter:int = 0;			var maxPattern:int = 32;			var nSimulations:int = 1000;			var timer:int = startClip;			var goalReached:int = 0; 			var data:Array = new Array();			var ffRate:Number; 			//physics variables			var flashPattern:uint;			var condition:uint; 			var collision:Number; 			var startClip:Number = 0; 			var stopClip:Number; 			var aball_int:int;			var bball_int:int;			var eball_int:int;			var counterbalance_int:int;			// var teleport_bol:Boolean; 			// var brick_bol:Boolean = true; 			// var grass_bol:Boolean = false; 			var angularNoise:Number; 			var velocityNoise:Number; 						var fixedNoise_bol:Boolean; 			var simulation_bol:Boolean;			var collisionAB_ary:Array = [NaN,43,NaN,NaN,NaN,NaN,71,96,NaN,73,NaN,NaN,77,68,112,NaN,127,NaN,NaN,NaN,NaN,NaN,84,NaN,112,NaN,154,143,86,88,106,NaN];					var collisionAE_ary:Array = [30,NaN,75,64,96,78,94,NaN,NaN,NaN,41,31,NaN,NaN,114,101,51,72,72,39,47,129,NaN,72,118,46,72,112,102,NaN,149,NaN];			var collisionBE_ary:Array = [47,NaN,75,130,80,59,NaN,88,111,NaN,NaN,137,NaN,NaN,114,NaN,64,65,72,69,67,117,NaN,122,NaN,154,NaN,NaN,NaN,104,NaN,54];			//used for recording collision times 			var collisionAB_int:int = -1;			var collisionAE_int:int = -1;			var collisionBE_int:int = -1;			//used for detecting the first collision of each type			var firstCollisionAB_int:int = 0;			var firstCollisionAE_int:int = 0;			var firstCollisionBE_int:int = 0;			//first collision that involves ball A or ball B 			var collisionA_ary:Array = [30,43,75,64,96,78,71,96,NaN,73,41,31,77,68,112,101,51,72,72,39,47,129,84,72,112,46,72,112,86,88,106,NaN];			var collisionB_ary:Array = [47,43,75,130,80,59,71,88,111,73,NaN,137,77,68,112,NaN,64,65,72,69,67,117,84,122,112,154,154,143,86,88,106,54];			var collisionFirst_ary:Array = [30,43,75,64,80,59,71,88,111,73,41,31,77,68,112,101,51,65,72,39,47,117,84,72,112,46,72,112,86,88,106,54];			//event listeners for control flow (otherwise, functioning is stochastic)			addEventListener("NewRound",RunPhysics);			addEventListener("SimulationRoundFinished",SaveData);						dispatchEvent(new Event("NewRound"));				function RunPhysics(event:Event){													//Scaling constant 			var SCALE:Number = 60; //--> pixel to meter 			var WIDTH:Number = 800;			var HEIGHT:Number = 600;			var speed:Number = 3;								//Creating the world			var gravity:b2Vec2 = new b2Vec2(0,0); //x and y coordinate			var allowSleep:Boolean = false;			var world:b2World = new b2World(gravity,allowSleep);						//Balls			var body1posx:Number;				var body1posy:Number;			var body1linx:Number;			var body1liny:Number;						var body2posx:Number; 			var body2posy:Number;			var body2linx:Number;			var body2liny:Number;			var body3posx:Number; 			var body3posy:Number;			var body3linx:Number;			var body3liny:Number;			//trace("flashPattern: ", flashPattern)			//data.push("flashPattern: ", flashPattern);								//////////////////////////////////////////////////////			// Create Objects				//////////////////////////////////////////////////////						//Creating Objects in the world  			//1. Body definition			//2. Body			//3. Shape 			//4. Fixture definition 			//5. Create fixture 								//Walls						var topWallBody:b2Body = createWalls((WIDTH/2)/SCALE,10/SCALE, (WIDTH/2)/SCALE,(20/2)/SCALE,"topWall");			var bottomWallBody:b2Body = createWalls((WIDTH/2)/SCALE,590/SCALE, (WIDTH/2)/SCALE,(20/2)/SCALE,"bottomWall");			var topLeftWallBody:b2Body = createWalls(10/SCALE,100/SCALE, 10/SCALE,100/SCALE,"topLeftWall");			var bottomLeftWallBody:b2Body = createWalls(10/SCALE,(HEIGHT-100)/SCALE, 10/SCALE,100/SCALE,"bottomLeftWall");						function createWalls(positionX,positionY,halfwidth,halfheight,userdata):b2Body{				//def				var wallBodyDef:b2BodyDef = new b2BodyDef();				wallBodyDef.position.Set(positionX,positionY); //position of the body				wallBodyDef.type = b2Body.b2_staticBody; //determines the body type					var wallBody:b2Body = world.CreateBody(wallBodyDef); //adds the body to the world				//shape				var wallShape:b2PolygonShape = new b2PolygonShape(); //box shape 				wallShape.SetAsBox(halfwidth,halfheight);				//fixture 				var wallFixtureDef:b2FixtureDef = new b2FixtureDef();				wallFixtureDef.shape = wallShape;				wallFixtureDef.density = 1;				wallFixtureDef.friction = 0;				wallFixtureDef.restitution = 1;				wallBody.SetUserData(userdata);				wallBody.CreateFixture(wallFixtureDef); //assign fixture definition to the body				return wallBody;			}							patterns_func();			function patterns_func(){			//Patterns				switch (flashPattern){				case 1: 					// e, e|A, e|B, e|AB; note only e|A if A is not removed after the first interaction   					body1posx = (WIDTH + 30)/SCALE;					body1posy = (150)/SCALE;					body1linx = speed*-1;					body1liny = speed*-0;										body2posx = (WIDTH + 75)/SCALE; 					body2posy = (280)/SCALE;					body2linx = speed*-1.2;					body2liny = speed*-.4;										body3posx = (WIDTH + 155)/SCALE; 					body3posy = (70)/SCALE;					body3linx = speed*-1.3;					body3liny = speed*0;					break;								case 2: //e, e|A, e|B, e|AB					body1posx = (200)/SCALE;					body1posy = (350)/SCALE;					body1linx = speed*0;					body1liny = speed*0;										body2posx = (WIDTH + 30)/SCALE; 					body2posy = (450)/SCALE;					body2linx = speed*-1;					body2liny = speed*-.6;										body3posx = (WIDTH + 30)/SCALE; 					body3posy = (100)/SCALE;					body3linx = speed*-1;					body3liny = speed*.55;					break;								case 3: 					//e, e|A, e|B, E|AB; Joint causation: red ball at rest  					body1posx = (WIDTH/2-55)/SCALE;					body1posy = (HEIGHT/2)/SCALE;					body1linx = speed*0;					body1liny = speed*0;										body2posx = (WIDTH + 30)/SCALE; 					body2posy = (HEIGHT-550)/SCALE;					body2linx = speed*-1;					body2liny = speed*.45;										body3posx = (WIDTH + 30)/SCALE; 					body3posy = (HEIGHT-50)/SCALE;					body3linx = speed*-1;					body3liny = speed*-.45;					break;								case 4: 					//e e|A e|B e|AB    					body1posx = (WIDTH+30)/SCALE;					body1posy = (410)/SCALE;					body1linx = speed*-.75;					body1liny = speed*0;										body2posx = (WIDTH+270)/SCALE; 					body2posy = (550)/SCALE;					body2linx = speed*-1.3;					body2liny = speed*-.23;										body3posx = (WIDTH + 250)/SCALE; 					body3posy = (50)/SCALE;					body3linx = speed*-1.1;					body3liny = speed*.2;					break;								case 5: 					// e, e|A, E|B, e|AB   					body1posx = (300)/SCALE;					body1posy = (450)/SCALE;					body1linx = speed*0;					body1liny = speed*0;										body2posx = (200)/SCALE; 					body2posy = (350)/SCALE;					body2linx = speed*0;					body2liny = speed*0;										body3posx = (WIDTH + 30)/SCALE; 					body3posy = (550)/SCALE;					body3linx = speed*-1;					body3liny = speed*-0.15;					break;								case 6: //e, e|A, E|B, e|AB					body1posx = (WIDTH + 120)/SCALE;					body1posy = (500)/SCALE;					body1linx = speed*-.9;					body1liny = speed*-0.4;										body2posx = (WIDTH + 30)/SCALE; 					body2posy = (550)/SCALE;					body2linx = speed*-.9;					body2liny = speed*-0.4;										body3posx = (WIDTH + 170)/SCALE; 					body3posy = (220)/SCALE;					body3linx = speed*-.9;					body3liny = speed*.3;					break;								case 7: 					//e, e|A, E|B, E|AB; causal chain: only C moving  					body1posx = (150)/SCALE;					body1posy = (HEIGHT/2)/SCALE;					body1linx = speed*0;					body1liny = speed*0;										body2posx = (350)/SCALE; 					body2posy = (HEIGHT/2)/SCALE;					body2linx = speed*0;					body2liny = speed*0;										body3posx = (WIDTH + 30)/SCALE; 					body3posy = (HEIGHT/2)/SCALE;					body3linx = speed*-1;					body3liny = speed*0;					break;								case 8: //e, e|A, E|B, E|AB					body1posx = (300)/SCALE;					body1posy = (300)/SCALE;					body1linx = speed*0;					body1liny = speed*0;										body2posx = (WIDTH + 100)/SCALE; 					body2posy = (550)/SCALE;					body2linx = speed*-.9;					body2liny = speed*-0.3;										body3posx = (WIDTH + 30)/SCALE; 					body3posy = (150)/SCALE;					body3linx = speed*-.9;					body3liny = speed*.3;					break;								case 9: 					//e, E|A, e|B, e|AB; interesting prevention case					body1posx = (100)/SCALE;					body1posy = (HEIGHT/2)/SCALE;					body1linx = speed*0;					body1liny = speed*0;										body2posx = (WIDTH + 30)/SCALE; 					body2posy = (HEIGHT/2)/SCALE;					body2linx = speed*-0.9;					body2liny = speed*0;										body3posx = (WIDTH + 60)/SCALE; 					body3posy = (550)/SCALE;					body3linx = speed*-1.1;					body3liny = speed*-.3;					break;								case 10: //e, E|A, e|B, e|AB					body1posx = (300)/SCALE;					body1posy = (300)/SCALE;					body1linx = speed*0;					body1liny = speed*0;										body2posx = (WIDTH + 30)/SCALE; 					body2posy = (450)/SCALE;					body2linx = speed*-.9;					body2liny = speed*-.3;										body3posx = (WIDTH + 100)/SCALE; 					body3posy = (50)/SCALE;					body3linx = speed*-1;					body3liny = speed*0.5;					break;								case 11: //e, E|A, e|B, E|AB					body1posx = (WIDTH + 30)/SCALE;					body1posy = (450)/SCALE;					body1linx = speed*-0.8;					body1liny = speed*0;										body2posx = (WIDTH + 100)/SCALE; 					body2posy = (250)/SCALE;					body2linx = speed*-1;					body2liny = speed*.6;										body3posx = (WIDTH + 230)/SCALE; 					body3posy = (540)/SCALE;					body3linx = speed*-1.2;					body3liny = speed*0;					break;								case 12: //e, E|A, e|B, E|AB					body1posx = (WIDTH + 40)/SCALE;					body1posy = (150)/SCALE;					body1linx = speed*-0.9;					body1liny = speed*0;										body2posx = (WIDTH + 30)/SCALE; 					body2posy = (300)/SCALE;					body2linx = speed*-0.8;					body2liny = speed*-0.5;										body3posx = (WIDTH + 30)/SCALE; 					body3posy = (550)/SCALE;					body3linx = speed*-.9;					body3liny = speed*-.3;					break;								case 13: 					//e, E|A, E|B, e|AB; prevention					body1posx = (100)/SCALE;					body1posy = (HEIGHT/2)/SCALE;					body1linx = speed*0;					body1liny = speed*0;										body2posx = (WIDTH + 30)/SCALE; 					body2posy = (280)/SCALE;					body2linx = speed*-0.9;					body2liny = speed*0.06;										body3posx = (WIDTH + 180)/SCALE; 					body3posy = (550)/SCALE;					body3linx = speed*-1.2;					body3liny = speed*-.4;					break;								case 14: //e, E|A, E|B, e|AB					body1posx = (WIDTH + 30)/SCALE;					body1posy = (400)/SCALE;					body1linx = speed*-0.8;					body1liny = speed*-0.2;										body2posx = (WIDTH + 200)/SCALE; 					body2posy = (50)/SCALE;					body2linx = speed*-1*1.04;					body2liny = speed*0.5*1.04;										body3posx = (WIDTH + 220)/SCALE; 					body3posy = (500)/SCALE;					body3linx = speed*-1.1;					body3liny = speed*-0.45;					break;								case 15: 					body1posx = (100)/SCALE;					body1posy = (HEIGHT/2)/SCALE;					body1linx = speed*0;					body1liny = speed*0;										body2posx = (WIDTH + 30)/SCALE; 					body2posy = (430)/SCALE;					body2linx = speed*-1;					body2liny = speed*-.15;										body3posx = (WIDTH + 30)/SCALE; 					body3posy = (170)/SCALE;					body3linx = speed*-1;					body3liny = speed*.15;					// ORIGINAL CLIP: e, E|A, E|B, E|AB; overdetermination					// body1posx = (WIDTH/2-230)/SCALE;					// body1posy = (HEIGHT/2)/SCALE;					// body1linx = speed*0;					// body1liny = speed*0;										// body2posx = (WIDTH + 30)/SCALE; 					// body2posy = (430)/SCALE;					// body2linx = speed*-1;					// body2liny = speed*-.17;										// body3posx = (WIDTH + 30)/SCALE; 					// body3posy = (170)/SCALE;					// body3linx = speed*-1;					// body3liny = speed*.17;					break;								case 16: 					//e, E|A, E|B, E|AB; preemption					body1posx = (WIDTH/2-230)/SCALE;					body1posy = (HEIGHT/2)/SCALE;					body1linx = speed*0;					body1liny = speed*0;										body2posx = (WIDTH + 30)/SCALE; 					body2posy = (430)/SCALE;					body2linx = speed*-1;					body2liny = speed*-.18;										body3posx = (WIDTH + 30)/SCALE; 					body3posy = (170)/SCALE;					body3linx = speed*(-3/4);					body3liny = speed*(.18*(3/4));					break;								case 17: //E, e|A, e|B, e|AB					body1posx = (WIDTH + 30)/SCALE;					body1posy = (300)/SCALE;					body1linx = speed*-0.85;					body1liny = speed*-0;										body2posx = (WIDTH + 30)/SCALE; 					body2posy = (50)/SCALE;					body2linx = speed*-1;					body2liny = speed*0.7;										body3posx = (WIDTH + 120)/SCALE; 					body3posy = (550)/SCALE;					body3linx = speed*-1;					body3liny = speed*-0.45;					// Clip used in original experiment: E, E|A, e|B, e|AB 					// body1posx = (WIDTH + 30)/SCALE;					// body1posy = (300)/SCALE;					// body1linx = speed*-0.85;					// body1liny = speed*-0;										// body2posx = (WIDTH + 30)/SCALE; 					// body2posy = (50)/SCALE;					// body2linx = speed*-1;					// body2liny = speed*0.5;										// body3posx = (WIDTH + 120)/SCALE; 					// body3posy = (550)/SCALE;					// body3linx = speed*-1;					// body3liny = speed*-0.45;					break;								case 18: //E, e|A, e|B, e|AB					body1posx = (WIDTH + 50)/SCALE;					body1posy = (300)/SCALE;					body1linx = speed*-.8;					body1liny = speed*-0;										body2posx = (WIDTH + 40)/SCALE; 					body2posy = (550)/SCALE;					body2linx = speed*-.8;					body2liny = speed*-0.4;										body3posx = (WIDTH + 30)/SCALE; 					body3posy = (50)/SCALE;					body3linx = speed*-.7;					body3liny = speed*0.5;					// Clip used in original experiment: E, e|A, E|B, e|AB 					// body1posx = (WIDTH + 30)/SCALE;					// body1posy = (300)/SCALE;					// body1linx = speed*-0.98;					// body1liny = speed*-0;										// body2posx = (WIDTH + 30)/SCALE; 					// body2posy = (550)/SCALE;					// body2linx = speed*-1;					// body2liny = speed*-0.5;										// body3posx = (WIDTH + 120)/SCALE; 					// body3posy = (50)/SCALE;					// body3linx = speed*-1;					// body3liny = speed*0.45;					break;								case 19: //E, e|A, e|B, E|AB; joint causation 					body1posx = (WIDTH + 30)/SCALE;					body1posy = (HEIGHT/2)/SCALE;					body1linx = speed*-1;					body1liny = speed*0;										body2posx = (WIDTH + 50)/SCALE; 					body2posy = (HEIGHT-550)/SCALE;					body2linx = speed*-1;					body2liny = speed*.45;										body3posx = (WIDTH + 50)/SCALE; 					body3posy = (HEIGHT-50)/SCALE;					body3linx = speed*-1;					body3liny = speed*-.45;					break;								case 20: //E, e|A, e|B, E|AB					body1posx = (WIDTH + 30)/SCALE;					body1posy = (350)/SCALE;					body1linx = speed*-0.8;					body1liny = speed*-0;										body2posx = (WIDTH + 90)/SCALE; 					body2posy = (500)/SCALE;					body2linx = speed*-1;					body2liny = speed*-0.4;										body3posx = (WIDTH + 120)/SCALE; 					body3posy = (50)/SCALE;					body3linx = speed*-1*0.97;					body3liny = speed*0.45*0.97;														//Clip used in original Experiment: E, E|A, e|B, e|AB					// body1posx = (WIDTH + 30)/SCALE;					// body1posy = (300)/SCALE;					// body1linx = speed*-0.8;					// body1liny = speed*-0;										// body2posx = (WIDTH + 30)/SCALE; 					// body2posy = (550)/SCALE;					// body2linx = speed*-1;					// body2liny = speed*-0.5;										// body3posx = (WIDTH + 120)/SCALE; 					// body3posy = (50)/SCALE;					// body3linx = speed*-1;					// body3liny = speed*0.45;					break;								case 21: 					//E, e|A, E|B, e|AB; preventive chain  					body1posx = (WIDTH + 30)/SCALE;					body1posy = (350)/SCALE;					body1linx = speed*-1;					body1liny = speed*0;										body2posx = (WIDTH + 60)/SCALE; 					body2posy = (550)/SCALE;					body2linx = speed*-1.1;					body2liny = speed*-0.5;										body3posx = (WIDTH + 165)/SCALE; 					body3posy = (355)/SCALE;					body3linx = speed*-1.2;					body3liny = speed*-0.2;					break;								case 22: //E, e|A, E|B, e|AB					body1posx = (WIDTH + 30)/SCALE;					body1posy = (500)/SCALE;					body1linx = speed*-0.8*1.1;					body1liny = speed*-0.2*1.1;										body2posx = (80)/SCALE; 					body2posy = (350)/SCALE;					body2linx = speed*-0;					body2liny = speed*-0;										body3posx = (WIDTH + 100)/SCALE; 					body3posy = (75)/SCALE;					body3linx = speed*-1*0.9;					body3liny = speed*0.4*0.9;					break;								case 23: 					//E, e|A, E|B, E|AB; double prevention					body1posx = (WIDTH+30)/SCALE;					body1posy = (350)/SCALE;					body1linx = speed*-.79;					body1liny = speed*0;										body2posx = (WIDTH + 120)/SCALE; 					body2posy = (50)/SCALE;					body2linx = speed*-.9;					body2liny = speed*.37;										body3posx = (WIDTH + 360)/SCALE; 					body3posy = (480)/SCALE;					body3linx = speed*-1.3;					body3liny = speed*-.4;					break;								case 24: 					//E, e|A, E|B, E|AB; chain: E would go in   					body1posx = (WIDTH+30)/SCALE;					body1posy = (250)/SCALE;					body1linx = speed*-.75;					body1liny = speed*0;										body2posx = (WIDTH+170)/SCALE; 					body2posy = (50)/SCALE;					body2linx = speed*-1;					body2liny = speed*.35;										body3posx = (WIDTH + 250)/SCALE; 					body3posy = (550)/SCALE;					body3linx = speed*-1.1;					body3liny = speed*-.2;					break;								case 25: //E, E|A, e|B, e|AB					body1posx = (WIDTH + 30)/SCALE;					body1posy = (250)/SCALE;					body1linx = speed*-.8;					body1liny = speed*0;										body2posx = (WIDTH + 230)/SCALE; 					body2posy = (100)/SCALE;					body2linx = speed*-1;					body2liny = speed*.3;										body3posx = (WIDTH + 430)/SCALE; 					body3posy = (600)/SCALE;					body3linx = speed*-1.2*1.05;					body3liny = speed*-.35*1.05;					break;								case 26: //E, E|A, e|B, e|AB					body1posx = (WIDTH + 30)/SCALE;					body1posy = (300)/SCALE;					body1linx = speed*-0.8;					body1liny = speed*0;										body2posx = (WIDTH + 80)/SCALE; 					body2posy = (50)/SCALE;					body2linx = speed*-1;					body2liny = speed*.7;										body3posx = (80)/SCALE; 					body3posy = (320)/SCALE;					body3linx = speed*0;					body3liny = speed*0;					break;					//Clip used in original Experiment: E, E|A, E|B, e|AB					// body1posx = (WIDTH + 30)/SCALE;					// body1posy = (300)/SCALE;					// body1linx = speed*-0.85;					// body1liny = speed*0;										// body2posx = (WIDTH + 60)/SCALE; 					// body2posy = (50)/SCALE;					// body2linx = speed*-1;					// body2liny = speed*.7;										// body3posx = (150)/SCALE; 					// body3posy = (400)/SCALE;					// body3linx = speed*0;					// body3liny = speed*0;					// break;								case 27: //E, E|A, e|B, E|AB					body1posx = (WIDTH + 30)/SCALE;					body1posy = (250)/SCALE;					body1linx = speed*-.8;					body1liny = speed*0;										body2posx = (WIDTH + 250)/SCALE; 					body2posy = (150)/SCALE;					body2linx = speed*-1.2;					body2liny = speed*.15;										body3posx = (WIDTH + 130)/SCALE; 					body3posy = (550)/SCALE;					body3linx = speed*-1.2*0.8;					body3liny = speed*-.5*0.8;					break;								case 28: //E, E|A, e|B, E|AB					body1posx = (WIDTH + 30)/SCALE;					body1posy = (200)/SCALE;					body1linx = speed*-0.85;					body1liny = speed*.15;										body2posx = (WIDTH + 170)/SCALE; 					body2posy = (500)/SCALE;					body2linx = speed*-1;					body2liny = speed*-.23;										body3posx = (100)/SCALE; 					body3posy = (350)/SCALE;					body3linx = speed*0;					body3liny = speed*0;					break;								case 29: //E, E|A, E|B, e|AB					body1posx = (WIDTH + 30)/SCALE;					body1posy = (350)/SCALE;					body1linx = speed*-.8;					body1liny = speed*0;										body2posx = (WIDTH +250)/SCALE; 					body2posy = (500)/SCALE;					body2linx = speed*-1;					body2liny = speed*-.35;										body3posx = (WIDTH + 430)/SCALE; 					body3posy = (150)/SCALE;					body3linx = speed*-1.2*1.05;					body3liny = speed*.25*1.05;					break;								case 30: 					//E, E|A, E|B, e|AB; preventive chain 					body1posx = (WIDTH + 30)/SCALE;					body1posy = (250)/SCALE;					body1linx = speed*-.75;					body1liny = speed*0;										body2posx = (WIDTH + 120)/SCALE; 					body2posy = (70)/SCALE;					body2linx = speed*-0.9;					body2liny = speed*0.08;										body3posx = (400)/SCALE; 					body3posy = (150)/SCALE;					body3linx = speed*0;					body3liny = speed*0;					break;								case 31: 					//E, E|A, E|B, E|AB; causal chain: A, B and C moving 					body1posx = (WIDTH+30)/SCALE;					body1posy = (HEIGHT/2)/SCALE;					body1linx = speed*-.75;					body1liny = speed*0;										body2posx = (WIDTH+350)/SCALE; 					body2posy = (HEIGHT/2)/SCALE;					body2linx = speed*-1;					body2liny = speed*0;										body3posx = (WIDTH + 600)/SCALE; 					body3posy = (HEIGHT/2)/SCALE;					body3linx = speed*-1.3;					body3liny = speed*0;					break;								case 32: 					//E, E|A, E|B, E|AB; interesting almost case (no counterfactual for any ball)   					body1posx = (WIDTH+30)/SCALE;					body1posy = (HEIGHT/2)/SCALE;					body1linx = speed*-.75;					body1liny = speed*0;										body2posx = (WIDTH+150)/SCALE; 					body2posy = (50)/SCALE;					body2linx = speed*-1;					body2liny = speed*.3;										body3posx = (WIDTH + 200)/SCALE; 					body3posy = (350)/SCALE;					body3linx = speed*-1.1;					body3liny = speed*-.1;					break;				//case 33--35 used for a different experiment 						case 33: //preemption					body1posx = (100)/SCALE;					body1posy = (HEIGHT/2)/SCALE;					body1linx = speed*0;					body1liny = speed*0;										body2posx = (WIDTH + 30)/SCALE; 					body2posy = (430)/SCALE;					body2linx = speed*-1;					body2liny = speed*-.15;										body3posx = (WIDTH + 30)/SCALE; 					body3posy = (170)/SCALE;					body3linx = speed*-1;					body3liny = speed*0;					break;				case 34: //preemption					body1posx = (100)/SCALE;					body1posy = (HEIGHT/2)/SCALE;					body1linx = speed*0;					body1liny = speed*0;										body2posx = (WIDTH + 30)/SCALE; 					body2posy = (430)/SCALE;					body2linx = speed*-1;					body2liny = speed*-.15;										body3posx = (WIDTH + 30)/SCALE; 					body3posy = (170)/SCALE;					body3linx = speed*-1*0.95;					body3liny = speed*.15*0.95;					break;				case 35: //overdetermination 					body1posx = (100)/SCALE;					body1posy = (HEIGHT/2)/SCALE;					body1linx = speed*0;					body1liny = speed*0;										body2posx = (WIDTH + 30)/SCALE; 					body2posy = (430)/SCALE;					body2linx = speed*-1;					body2liny = speed*-.15;										body3posx = (WIDTH + 30)/SCALE; 					body3posy = (170)/SCALE;					body3linx = speed*-1;					body3liny = speed*.15;					break;								case 36: //joint causation 					body1posx = (WIDTH/2-55)/SCALE;					body1posy = (HEIGHT/2)/SCALE;					body1linx = speed*0;					body1liny = speed*0;										body2posx = (WIDTH + 30)/SCALE; 					body2posy = (HEIGHT-50)/SCALE;					body2linx = speed*-1;					body2liny = speed*-.46;					body3posx = (WIDTH + 30)/SCALE; 					body3posy = (HEIGHT-550)/SCALE;					body3linx = speed*-1;					body3liny = speed*.455;					break;				//cases used for how-counterfactual experiment				case 38: //simple causal chain (two balls)					body1posx = (WIDTH/2)/SCALE; 					body1posy = (HEIGHT/2)/SCALE;					body1linx = speed*0;					body1liny = speed*0;										body2posx = (WIDTH + 30)/SCALE; 					body2posy = (HEIGHT/2)/SCALE;					body2linx = speed*-1;					body2liny = speed*0;					body3posx = (WIDTH+100)/SCALE;					body3posy = (HEIGHT)/SCALE;					body3linx = speed*0;					body3liny = speed*0;							break;				case 39: //knocking ball out of the way 					body1posx = (WIDTH + 30)/SCALE; 					body1posy = (HEIGHT/2)/SCALE;					body1linx = speed*-0.6;					body1liny = speed*0;														body2posx = (WIDTH+90)/SCALE; 					body2posy = 40/SCALE;					body2linx = speed*-1;					body2liny = speed*.3;					body3posx = (200)/SCALE;					body3posy = (HEIGHT/2)/SCALE;					body3linx = speed*0;					body3liny = speed*0;					break;				//additional interesting test cases				case 40: //overdetermined prevention					body1posx = (WIDTH+30)/SCALE;					body1posy = (HEIGHT/2+5)/SCALE;					body1linx = speed*-1;					body1liny = speed*0					body2posx = (WIDTH + 30)/SCALE; 					body2posy = (HEIGHT-50)/SCALE;					body2linx = speed*-1;					body2liny = speed*-0.45;					body3posx = 80/SCALE; 					body3posy = (HEIGHT/2+5)/SCALE;					body3linx = speed*0;					body3liny = speed*0;										break;				case 41: //whether-cause by speeding up 					body1posx = (WIDTH + 30)/SCALE; 					body1posy = (HEIGHT/2)/SCALE;					body1linx = speed*-0.75;					body1liny = speed*0;														body2posx = (WIDTH+500)/SCALE; 					body2posy = (HEIGHT/2)/SCALE;					body2linx = speed*-1.5;					body2liny = speed*0;					body3posx = (WIDTH + 200)/SCALE;					body3posy = (10)/SCALE;					body3linx = speed*-1;					body3liny = speed*0.4;					break;				}			}			//counterbalancing of the balls 			if (counterbalance_int == 2){				var aPx:Number = body2posx;				var aPy:Number = body2posy;				var aLx:Number = body2linx;				var aLy:Number = body2liny;				body2posx = body3posx;				body2posy = body3posy;				body2linx = body3linx;				body2liny = body3liny;				body3posx = aPx; 				body3posy = aPy; 				body3linx = aLx; 				body3liny = aLy; 			}			//get rid of balls for counterfactual cases			// if (aball_int == 0){			// 	body2posx = 1000;			// 	body2posy = 500;			// 	body2linx = 0;			// 	body2liny = 0;			// }			// if (bball_int == 0){							// 	body3posx = 500;			// 	body3posy = 1000;			// 	body3linx = 0;			// 	body3liny = 0;			// }			// if (eball_int == 0){				// 	body1posx = 1000;			// 	body1posy = 1000;			// 	body1linx = 0;			// 	body1liny = 0;			// }						//BALLS			var ball1Body:b2Body = createBalls(body1posx,body1posy, 1, new b2Vec2(body1linx,body1liny), 0,"effectball",b2Body.b2_dynamicBody);			var ball2Body:b2Body = createBalls(body2posx,body2posy, 1, new b2Vec2(body2linx,body2liny), 0,"causeball1",b2Body.b2_dynamicBody);			var ball3Body:b2Body = createBalls(body3posx,body3posy, 1, new b2Vec2(body3linx,body3liny), 0,"causeball2",b2Body.b2_dynamicBody);						function createBalls(positionX,positionY,density,linearVel,linearDamp,userdata,type):b2Body{				//def				var ballBodyDef:b2BodyDef= new b2BodyDef();				ballBodyDef.position.Set(positionX,positionY); //position of the body				ballBodyDef.type = type; //determines the body type				ballBodyDef.bullet = true; //prevents tunelling for fast moving objects				ballBodyDef.linearVelocity = linearVel; //velocity in x and y direction (x:positive --> right, y:positive --> down)				ballBodyDef.linearDamping = linearDamp; //linear damping 				//body				var ballBody:b2Body = world.CreateBody(ballBodyDef); //adds the body to the world				//shape				var ballShape:b2CircleShape = new b2CircleShape(.5); //radius of the circle (.5 m)				//fixture 				var ballFixtureDef:b2FixtureDef = new b2FixtureDef();				ballFixtureDef.shape = ballShape;				ballFixtureDef.density = density;				ballFixtureDef.friction = 0;				ballFixtureDef.restitution = 1;								ballBody.SetUserData(userdata);				ballBody.CreateFixture(ballFixtureDef); //assign fixture definition to the body								return ballBody;			}																		//////////////////////////////////////////////////////			// SKINS			//////////////////////////////////////////////////////			if (simulation_bol == false){								//draw the balls (by using the symbols created in flash)						var ball2Skin:MovieClip = new causeball1();  				if (aball_int == 0){					addChildAt(ball2Skin,0);					ball2Skin.alpha = 0.2;					}				else{					addChild(ball2Skin);						}								ball2Skin.visible = false;								var ball3Skin:MovieClip = new causeball2();  				if (bball_int == 0){					addChildAt(ball3Skin,0);						ball3Skin.alpha = 0.2;				}				else{					addChild(ball3Skin);						}				ball3Skin.visible = false;				var ball1Skin:MovieClip = new effectball();  				if (eball_int == 0){					addChildAt(ball1Skin,0);						ball1Skin.alpha = 0.2;				}				else{					addChild(ball1Skin);						}				ball1Skin.visible = false;							function drawBalls():void{							ball2Skin.x = ball2Body.GetPosition().x*SCALE;					ball2Skin.y = ball2Body.GetPosition().y*SCALE;					ball2Skin.visible = true;					ball3Skin.x = ball3Body.GetPosition().x*SCALE;					ball3Skin.y = ball3Body.GetPosition().y*SCALE;					ball3Skin.visible = true;					ball1Skin.x = ball1Body.GetPosition().x*SCALE;					ball1Skin.y = ball1Body.GetPosition().y*SCALE;					ball1Skin.visible = true;				}			}									//////////////////////////////////////////////////////			// CONTACT LISTENERS			//////////////////////////////////////////////////////									var collisionABStart:int = 0;			var collisionAEStart:int = 0;			var collisionBEStart:int = 0;			var collisionWallStartA:int = 0;			var collisionWallStartB:int = 0;			var collisionWallStartE:int = 0;						//contact listener includes balls, grass, teleport			var contactRecorder = new custom_3ball_contact_listener();					world.SetContactListener(contactRecorder);			//////////////////////////////////////////////////////			// UPDATE FUNCTION			//////////////////////////////////////////////////////						timer = startClip;			addEventListener(Event.ENTER_FRAME, update);								function update(e:Event):void{											outerLoop: for (var i:Number = 0; i < ffRate;	i++){										var timeStep:Number = 1/30; 					//We must update the world at every frame. 					//We can do it with Step function. Step has two parameters: the first is the time interval, in seconds. 					//It means at every frame I am going to update the world as if 1/30s passed					var velocityIterations:int = 10;					var positionIterations:int = 10;																										// DETECT (first) COLLISIONS 							// collisionABStart = contactRecorder.getCollisionABStart();							// if (collisionABStart == 1 && firstCollisionAB_int == 0){					// 	trace("collision AB: ",timer);					// 	// data.push("collision AB: ",timer);											// 	//collisionAB_int = timer; 					// 	collisionAB_int = 1; 					// 	firstCollisionAB_int = 1; 					// 	collisionABStart = contactRecorder.setCollisionABStart();					// }					// collisionAEStart = contactRecorder.getCollisionAEStart();							// if (collisionAEStart == 1 && firstCollisionAE_int == 0){					// 	trace("collision AE: ",timer);						// 	//data.push("collision AE: ",timer);					// 	// //collisionAE_int = timer;					// 	collisionAE_int = 1;					// 	firstCollisionAE_int = 1; 					// 	collisionAEStart = contactRecorder.setCollisionAEStart();					// }					// collisionBEStart = contactRecorder.getCollisionBEStart();							// if (collisionBEStart == 1 && firstCollisionBE_int == 0){					// 	trace("collision BE: ",timer);															// 	// data.push("collision BE: ",timer);					// 	//collisionBE_int = timer;					// 	collisionBE_int = 1;					// 	firstCollisionBE_int = 1; 					// 	collisionBEStart = contactRecorder.setCollisionBEStart();					// }										//APPLY NOISE 					// if (angularNoise > 0){						if (aball_int == 0 && bball_int == 0){												if (timer == collisionFirst_ary[flashPattern-1]-1){								applyNoise(angularNoise,ball1Body);								ball2Body.SetLinearVelocity(new b2Vec2(0, 0));								ball3Body.SetLinearVelocity(new b2Vec2(0, 0));								world.DestroyBody(ball2Body);								world.DestroyBody(ball3Body);							}							}						else if (aball_int == 0 && bball_int == 1){							if (timer == collisionA_ary[flashPattern-1]-1){															applyNoise(angularNoise,ball1Body);								applyNoise(angularNoise,ball3Body);															ball2Body.SetLinearVelocity(new b2Vec2(0, 0));								world.DestroyBody(ball2Body);							}														}						else if (aball_int == 1 && bball_int == 0){							if (timer == collisionB_ary[flashPattern-1]-1){								applyNoise(angularNoise,ball1Body);								applyNoise(angularNoise,ball2Body);															ball3Body.SetLinearVelocity(new b2Vec2(0, 0));								world.DestroyBody(ball3Body);							}														}						//noise in actual world 						//maybe needs to be defined for each collision rather than only added at the first time of collision ...						// else if (aball_int == 1 && bball_int == 1){											// 	if (timer == collisionFirst_ary[flashPattern-1]-1){													// 		applyNoise(angularNoise,ball1Body);						// 		// applyNoise(angularNoise,ball2Body);						// 		// applyNoise(angularNoise,ball3Body);						// 	}							// }							if (eball_int == 0){							if (timer == collisionA_ary[flashPattern-1]-1){								ball1Body.SetLinearVelocity(new b2Vec2(0, 0));								world.DestroyBody(ball1Body);							}						}					// }										function applyNoise(angularNoise,ballBody){																			 var balllinx:Number;						 var ballliny:Number;						 var ballNoiselinx:Number;						 var ballNoiseliny:Number;						if (angularNoise != 0){							balllinx = ballBody.GetLinearVelocity().x;							ballliny = ballBody.GetLinearVelocity().y;							//number from random normal distribution							var randn:RandomNormal = new RandomNormal();														var angularPerturbation:Number;														if( fixedNoise_bol == true )							{								angularPerturbation = angularNoise;							}							else{								angularPerturbation = angularNoise*randn.standardNormal();							}							var cos_distortion:Number = Math.cos(angularPerturbation * (Math.PI/180)); //in degrees: degrees = radians * 180/Math.PI							var sin_distortion:Number = Math.sin(angularPerturbation * (Math.PI/180));														//change the direction of the velocity vector 							ballNoiselinx = balllinx * cos_distortion - ballliny * sin_distortion;							ballNoiseliny = balllinx * sin_distortion + ballliny * cos_distortion;														//apply noise														ballBody.SetLinearVelocity(new b2Vec2(ballNoiselinx,ballNoiseliny));						}												}													if (simulation_bol == false){drawBalls();}//draws the balls (updates the positions of the movieclips)											// drawBalls();															world.Step(timeStep,velocityIterations,positionIterations);					world.ClearForces();					timer = timer + 1; //updates the timer				//checks when to stop 				if (timer == stopClip){										if (ball1Body.GetDefinition().position.x < 0){						goalReached = 1;					}											//record whether or not the ball went in					data.push(goalReached);					//record collision times					// data.push(collisionAB_int, collisionAE_int, collisionBE_int)										//stops the world															removeEventListener(Event.ENTER_FRAME, update);					if (simulation_bol == true){							counter = counter + 1; 														dispatchEvent(new Event("SimulationRoundFinished"));																			}					else{						dispatchEvent(new Event("clipFinished"));							}					break outerLoop; 																		}			}		}	}					function SaveData(event:Event){					if (counter < nSimulations){											// data.push(flashPattern,goalReached,angularNoise*randomtest,collision[flashPattern-1]); //only saves whether red ball reached the goal or not								goalReached = 0;				//reset collision times 				// collisionAB_int = -1;				// collisionAE_int = -1;				// collisionBE_int = -1;				// firstCollisionAB_int = 0;				// firstCollisionAE_int = 0;				// firstCollisionBE_int = 0;								dispatchEvent(new Event("NewRound"));			}						else if (counter == nSimulations && flashPattern < maxPattern){				// trace('Clip: ', flashPattern); 															// trace('Goal reached: ', goalReached); 															timer = 0; //resets the timer												counter = 0;				goalReached = 0;				flashPattern = flashPattern + 1;					//reset collision times 				// collisionAB_int = -1;				// collisionAE_int = -1;				// collisionBE_int = -1;				// firstCollisionAB_int = 0;				// firstCollisionAE_int = 0;				// firstCollisionBE_int = 0;								trace('Run: ', String(run), 'Pattern: ', String(flashPattern)); 															dispatchEvent(new Event("NewRound"));				}						else if (counter == nSimulations && flashPattern == maxPattern && run < maxRun) {					timer = 0; //resets the timer									counter = 0;				goalReached = 0;				flashPattern = 1;								run = run + 1;				// trace('Goal reached: ', goalReached);								switch( run )				{					case 2: 					aball_int = 1;					bball_int = 0;					break; 					case 3: 					aball_int = 0;					bball_int = 1;					break; 					case 4: 					aball_int = 0;					bball_int = 0;					break; 				}				dispatchEvent(new Event("NewRound"));			}			else if (counter == nSimulations && flashPattern == maxPattern && run == maxRun) {																	// trace('Goal reached: ', goalReached);				var fileRef:FileReference= new FileReference();				var filename_str:String;				filename_str = "three_ball_singleNoise_" + angularNoise + ".txt";					// filename_str = "test1.txt";					fileRef.save([data] , filename_str);			}										}	}	}}
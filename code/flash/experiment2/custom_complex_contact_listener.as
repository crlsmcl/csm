package {	import Box2D.Collision.*;	import Box2D.Collision.Shapes.*;	import Box2D.Common.*;	import Box2D.Common.Math.*;	import Box2D.Dynamics.*;	import Box2D.Dynamics.Contacts.*;	import Box2D.Dynamics.Joints.*;		import flash.display.InteractiveObject;		class custom_complex_contact_listener extends b2ContactListener {		var collisionBallsStart:int = 0;		var collisionTeleportStart:int = 0;		var collisionGrassStart:int = 0;		var collisionGrassEnd:int = 0;		var collisionWallStart:int = 0;		var collisionBrickStart:int = 0;				override public function BeginContact(contact:b2Contact):void {			// getting the fixtures that collided			var fixtureA:b2Fixture=contact.GetFixtureA();			var fixtureB:b2Fixture=contact.GetFixtureB();						//balls			if ((fixtureA.GetBody().GetUserData() == 'redBall' && fixtureB.GetBody().GetUserData() == 'greyBall') ||				(fixtureA.GetBody().GetUserData() == 'greyBall' && fixtureB.GetBody().GetUserData() == 'redBall')){												collisionBallsStart = 1;			}						//teleport			if ((fixtureA.GetBody().GetUserData() == 'redBall' && fixtureB.GetBody().GetUserData() == 'teleport')||				(fixtureB.GetBody().GetUserData() == 'redBall' && fixtureA.GetBody().GetUserData() == 'teleport')){ 								// if (collisionTeleportStart == 0){collisionTeleportStart = 1;}				collisionTeleportStart = 1;									}						//grass (red ball)			if ((fixtureA.GetBody().GetUserData() == 'redBall' && fixtureB.GetBody().GetUserData() == 'grass')||				(fixtureB.GetBody().GetUserData() == 'redBall' && fixtureA.GetBody().GetUserData() == 'grass')){ 								collisionGrassStart = 1;			}			//grass			if (fixtureA.GetBody().GetUserData() == 'grass'){				fixtureB.GetBody().SetLinearDamping(.92);				collisionGrassStart = 1;			}			else if(fixtureB.GetBody().GetUserData() == 'grass'){				fixtureA.GetBody().SetLinearDamping(.92);				collisionGrassStart = 1;			}			//grass for the grey ball 			// if (fixtureA.GetBody().GetUserData() == 'grass' && fixtureB.GetBody().GetUserData() == 'greyBall'){			// 	fixtureB.GetBody().SetLinearDamping(.92);			// }			// else if(fixtureB.GetBody().GetUserData() == 'grass'  && fixtureA.GetBody().GetUserData() == 'greyBall'){			// 	fixtureA.GetBody().SetLinearDamping(.92);			// }			// //grass (grey ball)			// if (fixtureA.GetBody().GetUserData() == 'greyBall' && fixtureB.GetBody().GetUserData() == 'grass'){ 							// 	fixtureA.GetBody().SetLinearDamping(.92);			// }			// else if (fixtureB.GetBody().GetUserData() == 'greyBall' && fixtureA.GetBody().GetUserData() == 'grass'){			// 	fixtureB.GetBody().SetLinearDamping(.92);			// }			//walls			if ((fixtureA.GetBody().GetUserData() == 'redBall' && fixtureB.GetBody().GetUserData() == 'topWall')||				(fixtureB.GetBody().GetUserData() == 'redBall' && fixtureA.GetBody().GetUserData() == 'topWall')){ 								collisionWallStart = 1;			}			if ((fixtureA.GetBody().GetUserData() == 'redBall' && fixtureB.GetBody().GetUserData() == 'bottomWall')||				(fixtureB.GetBody().GetUserData() == 'redBall' && fixtureA.GetBody().GetUserData() == 'bottomWall')){ 								collisionWallStart = 1;			}			if ((fixtureA.GetBody().GetUserData() == 'redBall' && fixtureB.GetBody().GetUserData() == 'topLeftWall')||				(fixtureB.GetBody().GetUserData() == 'redBall' && fixtureA.GetBody().GetUserData() == 'topLeftWall')){ 								collisionWallStart = 1;			}			if ((fixtureA.GetBody().GetUserData() == 'redBall' && fixtureB.GetBody().GetUserData() == 'bottomLeftWall')||				(fixtureB.GetBody().GetUserData() == 'redBall' && fixtureA.GetBody().GetUserData() == 'bottomLeftWall')){ 								collisionWallStart = 1;			}				//brick			if ((fixtureA.GetBody().GetUserData() == 'redBall' && fixtureB.GetBody().GetUserData() == 'brick') ||				(fixtureA.GetBody().GetUserData() == 'brick' && fixtureB.GetBody().GetUserData() == 'redBall')){												collisionBrickStart = 1;			}				}						override public function EndContact(contact:b2Contact):void {			// getting the fixtures that collided			var fixtureA:b2Fixture=contact.GetFixtureA();			var fixtureB:b2Fixture=contact.GetFixtureB();									//grass			if ((fixtureA.GetBody().GetUserData() == 'redBall' && fixtureB.GetBody().GetUserData() == 'grass')||				(fixtureB.GetBody().GetUserData() == 'redBall' && fixtureA.GetBody().GetUserData() == 'grass')){ 								collisionGrassEnd = 1;			}			//grass (grey ball)			if (fixtureA.GetBody().GetUserData() == 'grass'){				fixtureB.GetBody().SetLinearDamping(.02);							}			else if(fixtureB.GetBody().GetUserData() == 'grass'){				fixtureA.GetBody().SetLinearDamping(.02);							}		}				//GETTER FUNCTIONS 				//balls		public function getCollisionBallsStart():int{			return collisionBallsStart		}		//grass		public function getCollisionGrassStart():int{			return collisionGrassStart		}		public function getCollisionGrassEnd():int{			return collisionGrassEnd 		}		//teleport 		public function getCollisionTeleportStart():int{			return collisionTeleportStart		}		//wall 		public function getCollisionWallStart():int{			return collisionWallStart		}		//brick 		public function getCollisionBrickStart():int{			return collisionBrickStart		}		//SETTER FUNCTIONS 		public function setCollisionBallsStart():int{			collisionBallsStart = 0;			return collisionBallsStart		}		public function setCollisionGrassStart():int{			collisionGrassStart = 0;			return collisionGrassStart		}		public function setCollisionGrassEnd():int{			collisionGrassEnd = 0;			return collisionGrassEnd 		}		public function setCollisionTeleportStart():int{			collisionTeleportStart = 0;			return collisionTeleportStart		}		public function setCollisionWallStart():int{			collisionWallStart = 0;			return collisionWallStart		}		public function setCollisionBrickStart():int{			collisionBrickStart = 0;			return collisionBrickStart		}	}}